-- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –º–æ–¥—É–ª—è
local chat_id = ctx.chat_id
local results = {}

-- –¢–µ—Å—Ç 1: GET –∑–∞–ø—Ä–æ—Å
local resp, err = http_get("https://api.github.com/users/github", {
    ["User-Agent"] = "TestBot/1.0"
})

if resp then
    results[1] = "‚úÖ GET: –°—Ç–∞—Ç—É—Å " .. resp.status .. ", –ø–æ–ª—É—á–µ–Ω–æ " .. #resp.body .. " –±–∞–π—Ç"
else
    results[1] = "‚ùå GET: " .. (err or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
end

-- –¢–µ—Å—Ç 2: POST –∑–∞–ø—Ä–æ—Å
local post_body = json_encode({
    test = "data",
    timestamp = os.time()
})

local post_resp, post_err = http_post("https://httpbin.org/post", {
    ["Content-Type"] = "application/json"
}, post_body)

if post_resp then
    results[2] = "‚úÖ POST: –°—Ç–∞—Ç—É—Å " .. post_resp.status
else
    results[2] = "‚ùå POST: " .. (post_err or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
end

-- –¢–µ—Å—Ç 3: Custom –º–µ—Ç–æ–¥
local custom_resp, custom_err = http_do("PUT", "https://httpbin.org/put", "test data", {
    ["Content-Type"] = "text/plain"
})

if custom_resp then
    results[3] = "‚úÖ PUT: –°—Ç–∞—Ç—É—Å " .. custom_resp.status
else
    results[3] = "‚ùå PUT: " .. (custom_err or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
end

local message = "üåê *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ HTTP:*\n\n" .. table.concat(results, "\n")
send(chat_id, message, nil)