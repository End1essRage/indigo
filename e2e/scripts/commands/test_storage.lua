-- –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
local chat_id = ctx.chat_id
local test_results = {}

log("Starting storage tests...")

-- –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
local function test_create()
    local test_data = {
        name = "Test User",
        score = 99,
        tags = {"test", "demo"},
        created_at = os.time()
    }
    
    local ok, id = storage_create("test_collection", test_data)
    if ok then
        log("created")

        table.insert(test_results, "‚úÖ CREATE: –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å ID: " .. id)
        return id
    else
        log("not created")

        table.insert(test_results, "‚ùå CREATE: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
        return nil
    end
end

-- –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ ID
local function test_get_by_id(id)
    local data, err = storage_get_by_id("test_collection", id)
    log(data)
    log(err)
    if err then
        log(test_results, "‚ùå GET BY ID: –û—à–∏–±–∫–∞: " .. err)
        table.insert(test_results, "‚ùå GET BY ID: –û—à–∏–±–∫–∞: " .. err)
    elseif data then
        log(test_results, "‚úÖ GET BY ID: –ù–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: " .. data.name)
        table.insert(test_results, "‚úÖ GET BY ID: –ù–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: " .. data.name)
    else
        log(test_results, "‚ùå GET BY ID: –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        table.insert(test_results, "‚ùå GET BY ID: –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    end
end

-- –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
local function test_update(id)
    local update_data = {
        score = 150,
        updated_at = os.time()
    }
    
    storage_update_by_id("test_collection", id, update_data)
    
    local updated = storage_get_by_id("test_collection", id)
    if updated and updated.score == 150 then
        table.insert(test_results, "‚úÖ UPDATE: –î–æ–∫—É–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")
    else
        table.insert(test_results, "‚ùå UPDATE: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    end
end

-- –¢–µ—Å—Ç 5: –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
local function test_bulk_update()
    local query = query_condition("score", "<", 200)
    local update_data = {
        category = "updated",
        bulk_updated = true
    }
    
    local count, err = storage_update("test_collection", query, update_data)
    local should = 5
    if err then 
        table.insert(test_results, "‚ùå BULK UPDATE: –æ—à–∏–±–∫–∞" .. err)
    else 
        if count == should then
            table.insert(test_results, "‚úÖ BULK UPDATE: –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        else 
            table.insert(test_results, "‚ùå BULK UPDATE: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –æ–±–Ω–æ–≤–∏–≤—à–µ—Ö—Å—è")
        end
    end
   
end

-- –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ ID
local function test_get_ids()
    local query = query_condition("score", ">", 0)
    local ids = storage_get_ids("test_collection", 10, query)
    local should = 5
    if #ids ~= should then 
        table.insert(test_results, "‚ùå GET IDS: –ü–æ–ª—É—á–µ–Ω–æ ID: " .. #ids .. " –î–æ–ª–∂–Ω–æ: " .. should)
    else
        table.insert(test_results, "‚úÖ GET IDS: –ü–æ–ª—É—á–µ–Ω–æ ID: " .. #ids)
    end
    
end

-- –¢–µ—Å—Ç 7: –£–¥–∞–ª–µ–Ω–∏–µ
local function test_delete(id)
    local ok, err = storage_delete_by_id("test_collection", id)
    if not ok then
        log("error while deleting" .. err)
    end

    local deleted, err = storage_get_by_id("test_collection", id)
    if err then 
        table.insert(test_results, "‚ùå DELETE: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è" .. err)
    else
        if not deleted then
            table.insert(test_results, "‚úÖ DELETE: –î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω")
        else
            table.insert(test_results, "‚ùå DELETE: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∏–ª–æ—Å—å")
        end
    end
end

local function seed_data()
    local count, err = storage_delete("test_collection", query_condition("_id", "!=", "a"))
    if err then
        table.insert(test_results, "‚ùå CREATE: –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö" .. err)
    end

    local test_data = {
        {
            name = "Test User1",
            score = 50,
            city = "KAZ",
            tags = {"test", "demo"},
            created_at = os.time()
        },
        {
            name = "Test User2",
            score = 99,
            city = "KAZ",
            tags = {"test", "demo"},
            created_at = os.time()
        },
        {
            name = "Test User3",
            score = 101,
            city = "MOS",
            tags = {"test", "demo"},
            created_at = os.time()
        },
        {
            name = "Test User4",
            score = 100,
            city = "MOS",
            tags = {"test", "demo"},
            created_at = os.time()
        },
        {
            name = "Test User5",
            score = 49,
            city = "MOS",
            tags = {"test", "demo"},
            created_at = os.time()
        },
    }
    
    local ok1, id1 = storage_create("test_collection", test_data[1])
    local ok2, id2 = storage_create("test_collection", test_data[2])
    local ok3, id3 = storage_create("test_collection", test_data[3])
    local ok4, id4 = storage_create("test_collection", test_data[4])
    local ok5, id5 = storage_create("test_collection", test_data[5])

    if ok1 and ok2 and ok3 and ok4 and ok5 then
        log("created")

        table.insert(test_results, "‚úÖ CREATE: –î–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —Å ID")
        return id
    else
        log("not created")

        table.insert(test_results, "‚ùå CREATE: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
        return nil
    end
end

-- –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ —Å —É—Å–ª–æ–≤–∏—è–º–∏
local function test_query()
    -- –ü—Ä–æ—Å—Ç–æ–µ —É—Å–ª–æ–≤–∏–µ
    local simple_query = query_condition("score", ">", 50)
    local should = 3
    local results, err = storage_get("test_collection", 10, simple_query)
    if err then
        table.insert(test_results, "‚ùå SIMPLE QUERY: –û—à–∏–±–∫–∞: " .. err)   
    else
        if should ~= #results then
            table.insert(test_results, "‚ùå SIMPLE QUERY: –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: " .. #results .. " –î–æ–ª–∂–Ω–æ: " .. should)     
        else
            table.insert(test_results, "‚úÖ SIMPLE QUERY: –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: " .. #results)     
        end
    end
                                                           
    
    -- –°–ª–æ–∂–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ —Å AND
    local complex_query = query_and(
        query_condition("city", "=", "MOS"),
        query_condition("score", ">=", 100)
    )
    should = 2
    results, err = storage_get("test_collection", 10, complex_query)
    if err then
        table.insert(test_results, "‚ùå AND QUERY: –û—à–∏–±–∫–∞: " .. err)   
    else
        if should ~= #results then
            table.insert(test_results, "‚ùå AND QUERY:: –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: " .. #results .. " –î–æ–ª–∂–Ω–æ: " .. should)  
        else
            table.insert(test_results, "‚úÖ AND QUERY: –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: " .. #results)     
        end
    end
    
    -- –£—Å–ª–æ–≤–∏–µ —Å OR
    local or_query = query_or(
        query_condition("city", "=", "KAZ"),
        query_condition("score", ">", 100)
    )
    should = 3
    results, err = storage_get("test_collection", 10, or_query)
    if err then
        table.insert(test_results, "‚ùå OR QUERY: –û—à–∏–±–∫–∞: " .. err)   
    else
        if should ~= #results then
            table.insert(test_results, "‚ùå OR QUERY: –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: " .. #results .. " –î–æ–ª–∂–Ω–æ: " .. should)     
        else
            table.insert(test_results, "‚úÖ OR QUERY: –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: " .. #results)     
        end
    end

    -- –£—Å–ª–æ–≤–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–µ –ø—É—Å—Ç–æ—Ç—É
    local emp_query = query_and(
        query_condition("city", "=", "KAZ"),
        query_condition("score", ">", 1000)
    )
    should = 0
    results, err = storage_get("test_collection", 10, emp_query)
    if err then
        table.insert(test_results, "‚ùå NOITEMS QUERY: –û—à–∏–±–∫–∞: " .. err)   
    else
        if should ~= #results then
            table.insert(test_results, "‚ùå NOITEMS QUERY: –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: " .. #results .. " –î–æ–ª–∂–Ω–æ: " .. should)     
        else
            table.insert(test_results, "‚úÖ NOITEMS QUERY: –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: " .. #results)     
        end
    end

    -- –ø—É—Å—Ç–∞—è –∫–≤–µ—Ä–∏
    should = 5
    results, err = storage_get("test_collection", 10)
    if err then
        table.insert(test_results, "‚ùå NO QUERY: –û—à–∏–±–∫–∞: " .. err)   
    else
        if should ~= #results then
            table.insert(test_results, "‚ùå NO QUERY: –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: " .. #results .. " –î–æ–ª–∂–Ω–æ: " .. should)     
        else
            table.insert(test_results, "‚úÖ NO QUERY: –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: " .. #results)     
        end
    end
end

-- –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
local test_id = test_create()
if test_id then
    test_get_by_id(test_id)
    test_update(test_id)
    test_delete(test_id)
end


seed_data()
test_query()
test_bulk_update()
test_get_ids()

-- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
local message = "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ Storage:*\n\n" .. table.concat(test_results, "\n")
send_message(chat_id, message)