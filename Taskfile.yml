version: "3"

vars:
  BINARY_NAME: "indigo.exe"
  IMAGE_NAME: "indigo"
  VERSION: "latest"
  DOCKER_REGISTRY: "end1essrage/"
  CONFIG_DIR: "${PWD}/config"
  SCRIPTS_DIR: "${PWD}/scripts"
  DATA_DIR: "${PWD}/data"
  BOT_TOKEN: ""
  PORT_BINDING: 80:8080

tasks:
  # тесты

  # Запуск всех тестов с race detector
  test:
    desc: Run tests with race detector
    env:
      CGO_ENABLED: "1"
    cmds:
      - cd core && go test -v -race ./...

  # Запуск бенчмарков
  bench:
    desc: Run benchmarks
    env:
      CGO_ENABLED: "1"
    cmds:
      - cd core && go test -bench=. -benchmem -v ./...

  # Покрытие кода
  test_cover:
    desc: Generate test coverage
    cmds:
      - cd core && go test -coverprofile=coverage.out ./...
      - cd core && go tool cover -html=coverage.out

  # Очистка
  test_clean:
    desc: Clean test artifacts
    cmds:
      - cd core && go clean -testcache
      - cd core && rm -f coverage.out

  # локальный запуск
  local:
    desc: Build and run the binary
    cmds:
      - cd core/cmd && go build -o ../../{{.BINARY_NAME}}
      - ./{{.BINARY_NAME}}
    env:
      BOT_TOKEN: "{{.BOT_TOKEN}}"
      MONGO_PWD: "{{.BOT_TOKEN}}"
      REDIS_PWD: "{{.BOT_TOKEN}}"
      SOME_SECRET: "{{.BOT_TOKEN}}"
      CONFIG_PATH: "{{.CONFIG_PATH}}"

  #запуск контейнера
  run:
    desc: Run container from the built image
    deps: [remove]
    cmds:
      - >-
        docker run -d --name {{.IMAGE_NAME}}
        -v {{.CONFIG_DIR}}:/app/config
        -v {{.SCRIPTS_DIR}}:/app/scripts
        -v {{.DATA_DIR}}:/app/data
        -e BOT_TOKEN={{.BOT_TOKEN}}
        -p {{.PORT_BINDING}}
        {{.DOCKER_REGISTRY}}{{.IMAGE_NAME}}:{{.VERSION}}

  # Запуск всех сервисов через Docker Compose
  up:
    desc: Start Redis, MongoDB, and the bot
    cmds:
      - docker-compose up -d --build
    env:
      BOT_TOKEN: "{{.BOT_TOKEN}}"

  # Остановка всех сервисов
  down:
    desc: Stop all services
    cmds:
      - docker-compose down

  # создание имейджа
  build:
    desc: Build Docker image with multiple tags
    cmds:
      - docker build -t {{.DOCKER_REGISTRY}}{{.IMAGE_NAME}}:{{.VERSION}} -t {{.DOCKER_REGISTRY}}{{.IMAGE_NAME}}:latest .
    sources:
      - core/**
      - Dockerfile

  # пуш в реджистри
  push:
    desc: Push both tags to registry
    cmds:
      - docker push {{.DOCKER_REGISTRY}}{{.IMAGE_NAME}}:{{.VERSION}}
      - docker push {{.DOCKER_REGISTRY}}{{.IMAGE_NAME}}:latest

  # удаление контейнера
  remove:
    desc: Remove existing container
    cmds:
      - docker rm -f {{.IMAGE_NAME}} || true

  # билд + пуш
  all:
    desc: Build, tag and push image
    deps: [test, build, push]

  # удаление локальных имейджей
  clean:
    desc: Remove built containers and images
    cmds:
      - docker rm -f {{.IMAGE_NAME}} {{.IMAGE_NAME}}-latest || true
      - docker rmi {{.DOCKER_REGISTRY}}{{.IMAGE_NAME}}:{{.VERSION}} {{.DOCKER_REGISTRY}}{{.IMAGE_NAME}}:latest || true
